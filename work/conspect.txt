



7 hash-func

wrong tablesize: not prime

avg size = 10-15


{ objects } = { words from file with text }
            = { war and peace / dict }

(easy-to-parse, skip punct)

fill hashtable
get chain lenth, write to file (равномерное / нет распр)
(14 13 15 16 12 14 15) vs (100 0 1 200 3 4 105)


.csv file (for exel) every line -> electronical line
divider:

    most exels use "\t"
    eng: comma separated values
    rus: semicolon

    no standarts...

start of every line = name of the func


readme!

write theory about hash table chain method (1 абзац)
ход работы
результаты (скрин графика)
график
обсуждение
заключение (какая функция лучше)

no first png from wiki

проблема с масштабом по вертикали


functions: (at most relly bad)

1) 1;
2) ascii (str [0])
3) strlen (str)
4) sumascii (str); often used - control sum
    некомутативные операции сильно лучше
    например, xor + shl
5)  if (blank (str)) return 0
    return cshr (str, n - 1) ^ str [n - 1]; cshr = ror = rotr = lorotr - rotate right
                                            но надо написать свою операцию
    забить ее в godbolt и сравнить результаты без О3 и с О3
6) same, but shl
7) choose

конец 80х дед писал граф. дамп
для гейм дева для базы данных на б+ дереве

не встраивать остаток от деления в хэш функцию

видео в вк минус конспект

//--------------------------------------------------

вторая часть:

ассемблерная оптимизация хэштаблицы
размер цепочки также плохой - 15-20

одна строчка встроенного асма отрубает оптимизатор для всей функции
а интринсик - нет


интринсики, асм вставки, подлинковка
нужно ускорить как можно больше за наименьшее кол-во строк асма
точно найти точку оптимизации - hotspot
profiler - прога, измеряющая статистику по каждой функции

оптимизируем операцию поиска
(создаем рандомные слова, ищем их)

vtune - платный, крутой
в vs есть свой
valgrind имеет плагин callgrind, результат - большой бинарный файл
просмотр с помощью kcachegrind - на гноме придется скачать kde

в ридмишке обьяснять, почему вычеркиваем некоторые функции из статистики
нет в ридмишке - не делали!!!
текст заменяет собою автора

способ оптимизации:
    ассемблерная вставка
    ассемблерный файл
    интринсики

считаем коэф ускорения.

повторяем процесс, оптимизируем другую функцию

начиная с этого второго шага, рассчитываем абсолютный - относительно базового вариана
и относительный - относительно предыдущего варианта
прекращаем оптимизацию, когда локальный коэф достаточно мал (меньше пары-тройки процентов)

состязаемся с -О0 - это будет долго
-О1 обгонять реально и честно
но в конце мы обгоним и -О3

хэш функция явно вызывается много раз, на опр этапе будет в топе таблицы

меняем хэш функцию на интринсик (crc32) (она тут ОДНА И ТА ЖЕ) (это считается за способ/этап оптимизации)

теперь инструкция Load все портит

1) выровнять все строки
2) отдельная прога, делающая бинарный формат текстового файла
    первый байт - длина, макс - 16 байт
3) для длинных слов - массив неотсортированных слов, ищем там линейным поиском
4) или же неоптимизированную хэш-таблицу...
5) или же оптимизированную, но вместо 1 xmm регистра - 2; <= 31 буква
6) ну а дальше - точно массив )


в результате - композиция хэш-функций, первая - разбитие по длине

можно ридмишку заслать на хабр в песочницу

//--------------------------------------------------

есть rdst - read ... time counter - возвращает общее кол-во циклов процессора


